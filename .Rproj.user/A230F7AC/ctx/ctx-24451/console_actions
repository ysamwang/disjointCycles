{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.4.1 (2024-06-14) -- \"Race for Your Life\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-pc-linux-gnu\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "sample.size <- 400",
        "> ",
        "rep.runs <- 5",
        "> ",
        "n.list <- c(10, 25, 50) * 1000",
        "> ",
        "c.list <- c(2, 3, 4)",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabComp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(!file.exists(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  } else {",
        "+ ",
        "    temp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    outTabComp <- rbind(outTabComp, temp)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "missing",
        " [1]   4  12  23  62  79 107 111 112 116 121\n[11] 137 214 220 242 251 257 275 279 283 287\n[21] 334 335 344 355 367 369 385 388 394 403\n[31] 469 471 492 555 564 567 568 654 663 666\n[41] 708 710\n\nRestarting R session...\n\n",
        "> ",
        "library(disjointCycles)",
        "> ",
        "sample.size <- 400",
        "> ",
        "rep.runs <- 5",
        "> ",
        "n.list <- c(10, 25, 50) * 1000",
        "> ",
        "c.list <- c(2, 3, 4)",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabComp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(!file.exists(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  } else {",
        "+ ",
        "    temp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    outTabComp <- rbind(outTabComp, temp)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "missing",
        " [1]   3   8  31  37  53  55 109 145 147 177 224 250 270 276 300 315 327 335 345 372 383 443 447\n[24] 449 458 479 482 547 558 570 605 624 632 633 653 711\n",
        "> ",
        "sample.size <- 400",
        "> ",
        "rep.runs <- 5",
        "> ",
        "n.list <- c(10, 25, 50) * 1000",
        "> ",
        "c.list <- c(2, 3, 4)",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabComp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(!file.exists(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  } else {",
        "+ ",
        "    temp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    outTabComp <- rbind(outTabComp, temp)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "missing",
        " [1]  23  31  46  61  66  67  69  70  72  75  97 100 103 143 166 193 207 229 249 253 256 270 279\n[24] 286 299 303 308 314 333 405 407 418 444 462 478 516 527 536 556 561 631 634 656 660\n",
        "> ",
        "?igraph::max_cliques",
        "> ",
        "sample.size <- 400",
        "> ",
        "rep.runs <- 5",
        "> ",
        "n.list <- c(10, 25, 50) * 1000",
        "> ",
        "c.list <- c(2, 3, 4)",
        "> ",
        "param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)",
        "> ",
        "",
        "> ",
        "runInd <- 1",
        "> ",
        "outTabComp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "> ",
        "missing <- c()",
        "> ",
        "for(runInd in 2:nrow(param.grid)){",
        "+ ",
        "  if(!file.exists(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))){",
        "+ ",
        "    missing <- c(missing, runInd)",
        "+ ",
        "  } else {",
        "+ ",
        "    temp <- read.csv(paste(\"~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_\", runInd, \".csv\", sep = \"\"))",
        "+ ",
        "    outTabComp <- rbind(outTabComp, temp)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "}",
        "> ",
        "missing",
        " [1]  15  18  35  40  48  51  54  57  66  69  72  75  89 112 115 122 152 176 188 216 220 239 249 255 271 295 308 327 335 366 420 422 427 429 432 441 451 459 467\n[40] 482 501 502 505 536 542 555 570 580 615 618 630 639 643 645 650 686 693 705 706\n",
        "> ",
        "aggregate(cbind(gamma, mixNorm)~ n, data = outTabComp, FUN = mean)",
        "      n gamma mixNorm\n1 10000     0       0\n2 25000     0       0\n3 50000     0       0\n",
        "> ",
        "outTabComp",
        "    X  p     n gamma mixNorm\n1   1 12 10000     0       0\n2   2 12 10000     0       0\n3   3 12 10000     0       0\n4   4 12 10000     0       0\n5   5 12 10000     0       0\n6   1 12 25000     0       0\n7   2 12 25000     0       0\n8   3 12 25000     0       0\n9   4 12 25000     0       0\n10  5 12 25000     0       0\n11  1 12 50000     0       0\n12  2 12 50000     0       0\n13  3 12 50000     0       0\n14  4 12 50000     0       0\n15  5 12 50000     0       0\n16  1 12 10000     0       0\n17  2 12 10000     0",
        "       0\n18  3 12 10000     0       0\n19  4 12 10000     0       0\n20  5 12 10000     0       0\n21  1 12 25000     0       0\n22  2 12 25000     0       0\n23  3 12 25000     0       0\n24  4 12 25000     0       0\n25  5 12 25000     0       0\n26  1 12 50000     0       0\n27  2 12 50000     0       0\n28  3 12 50000     0       0\n29  4 12 50000     0       0\n30  5 12 50000     0       0\n31  1 12 10000     0       0\n32  2 12 10000     0       0\n33  3 12 10000     0       0\n34  4 12 10000     0       0\n35  5 12 10000",
        "     0       0\n36  1 12 25000     0       0\n37  2 12 25000     0       0\n38  3 12 25000     0       0\n39  4 12 25000     0       0\n40  5 12 25000     0       0\n41  1 12 50000     0       0\n42  2 12 50000     0       0\n43  3 12 50000     0       0\n44  4 12 50000     0       0\n45  5 12 50000     0       0\n46  1 12 10000     0       0\n47  2 12 10000     0       0\n48  3 12 10000     0       0\n49  4 12 10000     0       0\n50  5 12 10000     0       0\n51  1 12 25000     0       0\n52  2 12 25000     0       0\n53  3",
        " 12 25000     0       0\n54  4 12 25000     0       0\n55  5 12 25000     0       0\n56  1 12 50000     0       0\n57  2 12 50000     0       0\n58  3 12 50000     0       0\n59  4 12 50000     0       0\n60  5 12 50000     0       0\n61  1 12 10000     0       0\n62  2 12 10000     0       0\n63  3 12 10000     0       0\n64  4 12 10000     0       0\n65  5 12 10000     0       0\n66  1 12 25000     0       0\n67  2 12 25000     0       0\n68  3 12 25000     0       0\n69  4 12 25000     0       0\n70  5 12 25000     0       0",
        "\n71  1 12 10000     0       0\n72  2 12 10000     0       0\n73  3 12 10000     0       0\n74  4 12 10000     0       0\n75  5 12 10000     0       0\n76  1 12 25000     0       0\n77  2 12 25000     0       0\n78  3 12 25000     0       0\n79  4 12 25000     0       0\n80  5 12 25000     0       0\n81  1 12 10000     0       0\n82  2 12 10000     0       0\n83  3 12 10000     0       0\n84  4 12 10000     0       0\n85  5 12 10000     0       0\n86  1 12 25000     0       0\n87  2 12 25000     0       0\n88  3 12 25000     0",
        "       0\n89  4 12 25000     0       0\n90  5 12 25000     0       0\n91  1 12 50000     0       0\n92  2 12 50000     0       0\n93  3 12 50000     0       0\n94  4 12 50000     0       0\n95  5 12 50000     0       0\n96  1 12 10000     0       0\n97  2 12 10000     0       0\n98  3 12 10000     0       0\n99  4 12 10000     0       0\n100 5 12 10000     0       0\n101 1 12 25000     0       0\n102 2 12 25000     0       0\n103 3 12 25000     0       0\n104 4 12 25000     0       0\n105 5 12 25000     0       0\n106 1 12 50000",
        "     0       0\n107 2 12 50000     0       0\n108 3 12 50000     0       0\n109 4 12 50000     0       0\n110 5 12 50000     0       0\n111 1 12 10000     0       0\n112 2 12 10000     0       0\n113 3 12 10000     0       0\n114 4 12 10000     0       0\n115 5 12 10000     0       0\n116 1 12 25000     0       0\n117 2 12 25000     0       0\n118 3 12 25000     0       0\n119 4 12 25000     0       0\n120 5 12 25000     0       0\n121 1 12 50000     0       0\n122 2 12 50000     0       0\n123 3 12 50000     0       0\n124 4",
        " 12 50000     0       0\n125 5 12 50000     0       0\n126 1 12 10000     0       0\n127 2 12 10000     0       0\n128 3 12 10000     0       0\n129 4 12 10000     0       0\n130 5 12 10000     0       0\n131 1 12 25000     0       0\n132 2 12 25000     0       0\n133 3 12 25000     0       0\n134 4 12 25000     0       0\n135 5 12 25000     0       0\n136 1 12 50000     0       0\n137 2 12 50000     0       0\n138 3 12 50000     0       0\n139 4 12 50000     0       0\n140 5 12 50000     0       0\n141 1 12 10000     0       0",
        "\n142 2 12 10000     0       0\n143 3 12 10000     0       0\n144 4 12 10000     0       0\n145 5 12 10000     0       0\n146 1 12 25000     0       0\n147 2 12 25000     0       0\n148 3 12 25000     0       0\n149 4 12 25000     0       0\n150 5 12 25000     0       0\n151 1 12 50000     0       0\n152 2 12 50000     0       0\n153 3 12 50000     0       0\n154 4 12 50000     0       0\n155 5 12 50000     0       0\n156 1 12 10000     0       0\n157 2 12 10000     0       0\n158 3 12 10000     0       0\n159 4 12 10000     0",
        "       0\n160 5 12 10000     0       0\n161 1 12 50000     0       0\n162 2 12 50000     0       0\n163 3 12 50000     0       0\n164 4 12 50000     0       0\n165 5 12 50000     0       0\n166 1 12 10000     0       0\n167 2 12 10000     0       0\n168 3 12 10000     0       0\n169 4 12 10000     0       0\n170 5 12 10000     0       0\n171 1 12 25000     0       0\n172 2 12 25000     0       0\n173 3 12 25000     0       0\n174 4 12 25000     0       0\n175 5 12 25000     0       0\n176 1 12 50000     0       0\n177 2 12 50000",
        "     0       0\n178 3 12 50000     0       0\n179 4 12 50000     0       0\n180 5 12 50000     0       0\n181 1 12 25000     0       0\n182 2 12 25000     0       0\n183 3 12 25000     0       0\n184 4 12 25000     0       0\n185 5 12 25000     0       0\n186 1 12 50000     0       0\n187 2 12 50000     0       0\n188 3 12 50000     0       0\n189 4 12 50000     0       0\n190 5 12 50000     0       0\n191 1 12 10000     0       0\n192 2 12 10000     0       0\n193 3 12 10000     0       0\n194 4 12 10000     0       0\n195 5",
        " 12 10000     0       0\n196 1 12 25000     0       0\n197 2 12 25000     0       0\n198 3 12 25000     0       0\n199 4 12 25000     0       0\n200 5 12 25000     0       0\n [ reached 'max' / getOption(\"max.print\") -- omitted 3105 rows ]\n",
        "> ",
        "trueGraph",
        "Error: object 'trueGraph' not found\n",
        "> ",
        "  B <- t(cycleChain(p, cycleSize = cycleSize))",
        "Error: object 'p' not found\n",
        "> ",
        "p <- 12",
        "> ",
        "  B <- t(cycleChain(p, cycleSize = cycleSize))",
        "Error: object 'cycleSize' not found\n",
        "> ",
        "cycleSize <- 3",
        "> ",
        "  B <- t(cycleChain(p, cycleSize = cycleSize))",
        "> ",
        "",
        "> ",
        "  trueGraph <- unname(split(1:p, rep(1:ceiling(p/cycleSize), each = cycleSize)[1:p]))",
        "> ",
        "trueGraph",
        "[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6\n\n[[3]]\n[1] 7 8 9\n\n[[4]]\n[1] 10 11 12\n\n",
        "> ",
        "log(10000)",
        "[1] 9.21034\n",
        "> ",
        "sample(5, size = 1)",
        "[1] 3\n",
        "> ",
        "sample(5, size = 1)",
        "[1] 5\n\nRestarting R session...\n\n"
    ]
}