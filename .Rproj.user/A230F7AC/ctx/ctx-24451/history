runInd <- 1
args <- commandArgs(TRUE)
for(i in 1:length(args)){
eval(parse(text = args[[i]]))
}
param.grid
sample.size <- 200
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
param.grid
runInd <- 1
sample.size <- 200
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs))
param.grid
p <- 8
n <- param.grid[runInd, 1]
n
rec <- matrix(0, rep.runs, 2)
for(i in 1:sim.size){
B <- t(ex3_2(lowEdge = .5, highEdge = .9))
trueGraph <- list(list(c(1), c(2)), list(c(3,4,5)), list(c(6,7,8)))
data <- rLSEM(p, n, dist = "gamma", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 1] <- compareOrders(trueGraph, out)
data <- rLSEM(p, n, dist = "mixedNorm", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 2] <- compareOrders(trueGraph, out)
}
rec <- matrix(0, rep.runs, 2)
for(i in 1:rep.runs){
B <- t(ex3_2(lowEdge = .5, highEdge = .9))
trueGraph <- list(list(c(1), c(2)), list(c(3,4,5)), list(c(6,7,8)))
data <- rLSEM(p, n, dist = "gamma", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 1] <- compareOrders(trueGraph, out)
data <- rLSEM(p, n, dist = "mixedNorm", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 2] <- compareOrders(trueGraph, out)
}
library(disjointCycles)
library("disjointCycles")
runInd
library("disjointCycles")
sample.size <- 200
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs))
p <- 8
n <- param.grid[runInd, 1]
rec <- matrix(0, rep.runs, 2)
for(i in 1:rep.runs){
B <- t(ex3_2(lowEdge = .5, highEdge = .9))
trueGraph <- list(list(c(1), c(2)), list(c(3,4,5)), list(c(6,7,8)))
data <- rLSEM(p, n, dist = "gamma", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 1] <- compareOrders(trueGraph, out)
data <- rLSEM(p, n, dist = "mixedNorm", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 2] <- compareOrders(trueGraph, out)
}
rec
colnames(rec) <- c("gamma", "mixNorm")
outTab <- data.frame(p, n, rec)
outTab
runInd <- 1
args <- commandArgs(TRUE)
for(i in 1:length(args)){
eval(parse(text = args[[i]]))
}
sample.size <- 200
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
p <- 12
n <- param.grid[runInd, 1]
cycleSize <- param.grid[runInd, 2]
rec <- matrix(0, rep.runs, 2)
for(i in 1:sim.size){
B <- t(cycleChain(p, cycleSize = cycleSize))
trueGraph <- unname(split(1:p, rep(1:ceiling(p/cycleSize), each = cycleSize)[1:p]))
data <- rLSEM(p, n, dist = "gamma", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 1] <- identical(trueGraph, out)
data <- rLSEM(p, n, dist = "mixedNorm", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 2] <- identical(trueGraph, out)
cat("i: ")
cat(i)
cat("\n")
cat(round(colMeans(rec[1:i, , drop = F]),3))
cat("\n")
}
rec <- matrix(0, rep.runs, 2)
for(i in 1:rep.runs){
B <- t(cycleChain(p, cycleSize = cycleSize))
trueGraph <- unname(split(1:p, rep(1:ceiling(p/cycleSize), each = cycleSize)[1:p]))
data <- rLSEM(p, n, dist = "gamma", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 1] <- identical(trueGraph, out)
data <- rLSEM(p, n, dist = "mixedNorm", BInput = B, lowScale = .8)
Y <- scale(data$Y)
out <- djcGetOrdering(Y, verbose = F)
rec[i, 2] <- identical(trueGraph, out)
cat("i: ")
cat(i)
cat("\n")
cat(round(colMeans(rec[1:i, , drop = F]),3))
cat("\n")
}
param.grid
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
param.grid
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs))
param.grid
param.grid
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
for(runInd in 2:nrow(param.grid)){
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs))
p <- 8
n <- param.grid[runInd, 1]
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/ex32/ex32_", runInd, ".csv", sep = ""))
for(runInd in 2:nrow(param.grid)){
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/ex32/ex32_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
outTabComp
outTabComp$gamma
aggregate(cbind(gamma, mixedNorm)~ n, data = outTabComp, FUN = mean)
aggregate(cbind(gamma, mixNorm)~ n, data = outTabComp, FUN = mean)
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
for(runInd in 2:nrow(param.grid)){
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = "")))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = "")))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
missing
runInd <- 5
param.grid
outTabComp
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
missing
library(disjointCycles)
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
missing
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
missing
?igraph::max_cliques
sample.size <- 400
rep.runs <- 5
n.list <- c(10, 25, 50) * 1000
c.list <- c(2, 3, 4)
param.grid <- expand.grid(rep(n.list, sample.size / rep.runs), c.list)
runInd <- 1
outTabComp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
missing <- c()
for(runInd in 2:nrow(param.grid)){
if(!file.exists(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))){
missing <- c(missing, runInd)
} else {
temp <- read.csv(paste("~/Dropbox/disjointCycles/simResults/cycleChain/cycleChain_", runInd, ".csv", sep = ""))
outTabComp <- rbind(outTabComp, temp)
}
}
missing
aggregate(cbind(gamma, mixNorm)~ n, data = outTabComp, FUN = mean)
outTabComp
trueGraph
B <- t(cycleChain(p, cycleSize = cycleSize))
p <- 12
B <- t(cycleChain(p, cycleSize = cycleSize))
cycleSize <- 3
B <- t(cycleChain(p, cycleSize = cycleSize))
trueGraph <- unname(split(1:p, rep(1:ceiling(p/cycleSize), each = cycleSize)[1:p]))
trueGraph
log(10000)
sample(5, size = 1)
sample(5, size = 1)
